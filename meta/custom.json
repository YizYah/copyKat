{".eslintrc":{"unit":"standard","comp":".eslintrc","addedCode":{"lintRules":"\n"},"replacedCode":{},"removedCode":{}},"README.md":{"unit":"standard","comp":"README.md","addedCode":{"beginning":"\n","afterDescription":"\n![happy cat](src/custom/images/COPYKAT-GIF3.gif)\n","badges":"\n\n[//]: # ( ns__start_section usageSection )\n# Usage\n\n[![oclif](https://img.shields.io/badge/cli-oclif-brightgreen.svg)](https://oclif.io)\n[![Version](https://img.shields.io/npm/v/copykat.starter.svg)](https://npmjs.org/package/copykat.starter)\n[![Downloads/week](https://img.shields.io/npm/dw/copykat.starter.svg)](https://npmjs.org/package/copykat.starter)\n[![License](https://img.shields.io/npm/l/copykat.starter.svg)](https://github.com//blob/master/package.json)\n","beforeToc":"\nYou'd be surprised how easy it is to create your own generator. Snif out a good example, \nthen pounce and finally chase it until it's just where you want it to be.\n\nThe generators use [ns-flip](https://www.npmjs.com/package/ns-flip), a re-generator tool.  \nYou can release your generator and then make changes as needed.  Whenever you update it,\nyour users can apply them.  For example, see [easy-oclif-cli](https://www.npmjs.com/package/easy-oclif-cli).\n","toc":"\n<!-- toc -->\n* [Usage](#usage)\n* [Commands](#commands)\n<!-- tocstop -->\n","usage":"\n\n<!-- usage -->\n```sh-session\n$ npm install -g copykat\n$ copykat COMMAND\nrunning command...\n$ copykat (-v|--version|version)\ncopykat/1.0.0 linux-x64 node-v14.9.0\n$ copykat --help [COMMAND]\nUSAGE\n  $ copykat COMMAND\n...\n```\n<!-- usagestop -->\n","commands":"\n<!-- commands -->\n* [`copykat chase TEMPLATEDIR`](#copykat-chase-templatedir)\n* [`copykat help [COMMAND]`](#copykat-help-command)\n* [`copykat pounce MODEL`](#copykat-pounce-model)\n\n## `copykat chase TEMPLATEDIR`\n\ncompare generated code to your model, changing both until you've replicated the model with your template\n\n```\nUSAGE\n  $ copykat chase TEMPLATEDIR\n\nARGUMENTS\n  TEMPLATEDIR  the path to your template\n\nOPTIONS\n  -h, --help  show CLI help\n\nEXAMPLE\n  $ copykat chase sampleTemplateDir \n  You have executed the chase command...\n```\n\n_See code: [src/commands/chase.ts](https://github.com/YizYah/copykat/blob/v1.0.0/src/commands/chase.ts)_\n\n## `copykat help [COMMAND]`\n\ndisplay help for copykat\n\n```\nUSAGE\n  $ copykat help [COMMAND]\n\nARGUMENTS\n  COMMAND  command to show help for\n\nOPTIONS\n  --all  see all commands in CLI\n```\n\n_See code: [@oclif/plugin-help](https://github.com/oclif/plugin-help/blob/v3.2.1/src/commands/help.ts)_\n\n## `copykat pounce MODEL`\n\nspecify a model code base and generate a template to build it\n\n```\nUSAGE\n  $ copykat pounce MODEL\n\nARGUMENTS\n  MODEL  path to a model code base from which you will generate your template\n\nOPTIONS\n  -h, --help                     show CLI help\n  -t, --templateDir=templateDir  path to the generator that you will build\n\nEXAMPLE\n  $ copykat pounce sampleModel -t sampleTemplateDir \n  You have executed the pounce command...\n```\n\n_See code: [src/commands/pounce.ts](https://github.com/YizYah/copykat/blob/v1.0.0/src/commands/pounce.ts)_\n<!-- commandsstop -->\n"},"replacedCode":{},"removedCode":{}},"src/commands/chase.ts":{"unit":"static-command","comp":"chase.ts","addedCode":{"customImports":"\n","examples":"\n// replace this when you change your command!! To regenerate fresh, first delete everything between the squre brackets.\n  `$ copykat chase sampleTemplateDir \nYou have executed the chase command...\n`,\n","run":"\n  // Put your custom code here...\n  Object.keys(args).map((argName: string) => {\n    if (args[argName] === 'sampleBadArgValue')\n      throw new Error(`bad arg value '${args[argName]}' for arg '${argName}'`)\n    return argName\n  })\n  this.log(`You have executed the chase command.\n  Here are the args you used: \n    templateDir: ${templateDir}\nLearn how to modify the generated code here: https://ns-flip.nostack.net/Safe-Custom-Code.`)\n  "},"replacedCode":{},"removedCode":{}},"src/commands/pounce.ts":{"unit":"static-command","comp":"pounce.ts","addedCode":{"customImports":"\n","examples":"\n// replace this when you change your command!! To regenerate fresh, first delete everything between the squre brackets.\n  `$ copykat pounce sampleModel -t sampleTemplateDir \nYou have executed the pounce command...\n`,\n","run":"\n  // Put your custom code here...\n  Object.keys(args).map((argName: string) => {\n    if (args[argName] === 'sampleBadArgValue')\n      throw new Error(`bad arg value '${args[argName]}' for arg '${argName}'`)\n    return argName\n  })\n  this.log(`You have executed the pounce command.\n  Here are the args you used: \n    model: ${model}\n  Here are the flags you used: \n    templateDir: ${templateDir}\n\nLearn how to modify the generated code here: https://ns-flip.nostack.net/Safe-Custom-Code.`)\n  "},"replacedCode":{},"removedCode":{}},"test/commands/chase.test.ts":{"unit":"static-command","comp":"chase.test.ts","addedCode":{"customImports":"\n","tests":"\n// replace everything in this tests section when you modify your code.\ndescribe('chase', () => {\n  test\n  .stdout()\n  .command(['chase', 'sampleTemplateDir'])\n  .it('runs chase with all args and flags', ctx => {\n    expect(ctx.stdout).to.contain('You have executed the chase command')\n  })\n\n  test\n  .stderr()\n  .command(['chase', 'sampleBadArgValue'])\n  .catch(error => {\n    expect(error.message).to.contain('bad arg value')\n  })\n  .it('requires proper args')\n})\n"},"replacedCode":{},"removedCode":{}},"test/commands/pounce.test.ts":{"unit":"static-command","comp":"pounce.test.ts","addedCode":{"customImports":"\n","tests":"\n// replace everything in this tests section when you modify your code.\ndescribe('pounce', () => {\n  test\n  .stdout()\n  .command(['pounce', 'sampleModel', '-t', 'sampleTemplateDir'])\n  .it('runs pounce with all args and flags', ctx => {\n    expect(ctx.stdout).to.contain('You have executed the pounce command')\n  })\n\n  test\n  .stderr()\n  .command(['pounce', 'sampleBadArgValue', '-t', 'sampleTemplateDir'])\n  .catch(error => {\n    expect(error.message).to.contain('bad arg value')\n  })\n  .it('requires proper args')\n})\n"},"replacedCode":{},"removedCode":{}}}
